link list
public abstract class Linked_List {

	public abstract void add(int num);
	public abstract void remove();
	public abstract void sort();
	public abstract void search(int snum);
	public abstract void update();
	public abstract void display();
	
		
}

main
public class Main {

	public static void main(String[] args) {

		MyList a = new MyList();
		
		a.add(5);
		a.add(50);
		a.add(80);
		a.add(10);
		a.add(30);
		a.add(20);
		a.search(10);
		a.remove();
		//a.sort();
		a.display();
		
			
		
	}

}

mylist
public class MyList extends Linked_List {
	
	public Node first = null;
	public Node last = null;
	public Node list;
	public int i,size;
	
			 
	public void add(int num)
	{
		Node list = new Node(num);
		
		if (first==null)
		{
			first=list;
			last=first;
		}
		else
		{
			last.next=list;
			list.previous=last;
			last=list;
		}
	}
	public void remove()
	{
		
		last=last.previous;
		last.next=null;
	}
	public void sort()
	{
		Node x = first;
		
		for(int j=0;j<5;j++)
		{
			Node f = x;
			Node g=x.next;
			if(f.num>g.num)
			{
			int m=f.num;
			f.num=g.num;
			g.num=m;
			}
		x=x.next;
		}
		
	}

	public void search( int snum)
	{
		boolean found = false;
		Node x = first;
		
		while (x.next != null)
		{
			if(x.num == snum)
			{	
				System.out.println("Value Exists . Index:"+x.next);
				found = true;
				break;
			}
			x=x.next;
		}
		if(!found)
		{
			System.out.println("Does not exist");
		}
		
	}
	public void update()
	{
		
	}
	
	
	
	public void display()
	{	
		Node x = first;
		System.out.print(x.num+" ");
		x=first.next;
	
		while ( x.next != null)
		{
			System.out.print(x.num+" ");
			x=x.next;
			size++;
		}
		
		System.out.print(x.num);
		
		
	}
	
	
}

node
public class Node {
	
	public int num;
	Node previous;
	Node next;
	Node self;
	
	public Node (int num)
	{
		this.num=num;
	}

}
